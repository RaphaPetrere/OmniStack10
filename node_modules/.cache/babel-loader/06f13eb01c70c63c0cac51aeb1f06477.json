{"ast":null,"code":"import _slicedToArray from \"/opt/lampp/htdocs/Omnistack10/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/opt/lampp/htdocs/Omnistack10/frontend/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport api from './services/api';\nimport './global.css';\nimport './App.css';\nimport './Sidebar.css';\nimport './Main.css'; // import DevForm from './components/DevForm';\n\nimport DevForm from './components/DevForm';\nimport DevItem from './components/DevItem';\n\nfunction App() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        devs = _useState2[0],\n        setDevs = _useState2[1];\n\n  useEffect(() => {\n    async function loadDevs() {\n      const response = await api.get('/devs');\n      setDevs(response.data);\n    }\n\n    loadDevs();\n  }, []);\n\n  async function handleAddDev(data) {\n    const response = await api.post('/devs', data);\n    setDevs([...devs, response.data]); //ce pega o objeto inteiro do dev e inclui no final do array de dev\n    //como vai setar o valor completo, n pode jogar response.data senao ele sobre todo o valor do estado dev\n    //entao criamos um array, copia todos os devs (...devs) e adiciona o novo no final (response.data)\n    //é assim q faz adição de um array dentro do JS, se fosse remoção seria .filter, alteração seria .map\n  }\n\n  return React.createElement(\"div\", {\n    id: \"app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"aside\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Cadastrar\"), React.createElement(DevForm, {\n    onSubmit: handleAddDev,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  })), React.createElement(\"main\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, devs.map(dev => React.createElement(DevItem, {\n    key: dev.id,\n    dev: dev,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }) //identificador de cada dev é o key.id\n  ), \" \")));\n}\n\nexport default App;\n/*AREA DE COMENTÁRIOS\nComo era o App.js na hora q ele estava explicando useState  (Até 42:48)\n->\n\nimport React, { useState } from 'react';\n//useState função do React pra criar um Estado\n\n// import Header from './Header';\n\n/*\n3 conceitos principais do React \n->\nComponente  : O App é um componente, é uma função q retorna um conteudo HTML, pode retornar CSS e até JS pra interface.   Só pode 1 componente por arquivo.\nce chama ele assim <Header />, cria ele com a 1° letra Maiuscula\nEstado      : Uma informação mantida pelo componente q o componente vai manipular\nPropriedade : no HTML é atributos, por exemplo <Header title=\"Dashboard\" />. São informação q um componente pai passa para o componente filho\n\n\nfunction App() { //o App é uma função q retorna um conteudo HTML\n\n  const [counter, setCounter] = useState(0); //passa o valor inicial, no caso, 0. \n  //A função useState retorna um array com uma variavel e uma função pra atualizar esse valor\n\n  // function decrementCounter(){\n  //   setCounter(counter - 1);\n  // }\n\n  //Toda função q é propria de um elemento, cria dentro dele msm\n  function incrementCounter(){\n    setCounter(counter + 1); //n se pode mudar o valor de um estado pique counter++ ou counter = 4;\n    //pro React, vc nunca vai alterar um dado, vai sempre criar um novo dado a partir do valor anterior q ce tinha dele. É a imutabilidade\n  }\n\n  return (\n    <>\n      <h1>Contador : {counter}</h1>\n      <button onClick={incrementCounter}>Incrementar</button>\n      <button onClick={decrementCounter}>Decrementar</button>  Eu criei essa função, é legal poder desenvolver enquanto ele explica outra coisa\n\n    { <Header title=\"Meu painel\"/>  !!!!Aqui estava comentado, ele utilizou só pra mostrar como chamar outro componente!!!!!\n      <Header title=\"Titulo 1\"/>\n      <Header title=\"Titulo 2\"/> }  \n    </> //precisa entrar num container se tiver + de 1 componente, senão da problema. O container pode ser uma <div> só q isso pode quebrar a estilização do site\n    //então, podemos utilizar uma coisa legal do React q é o fragment, é só uma assinatura <> </>, ai n afeta\n  );\n}\n\nexport default App;\n\n->\n\n\nEsse aqui era o Header.js\n// import React from 'react';\n\n// function Header(props){\n//     return <h1>{props.title}</h1> //dentro do HTML, toda hora q quiser introduzir um conteudo JS, utiliza chaves em volta\n// }\n\n// export default Header;\n\n\n<aside> { TAG no HTML pra fazer side bar  }\n*/","map":{"version":3,"sources":["/opt/lampp/htdocs/Omnistack10/frontend/src/App.js"],"names":["React","useState","useEffect","api","DevForm","DevItem","App","devs","setDevs","loadDevs","response","get","data","handleAddDev","post","map","dev","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,gBAAhB;AAEA,OAAO,cAAP;AACA,OAAO,WAAP;AACA,OAAO,eAAP;AACA,OAAO,YAAP,C,CAEA;;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;AAEA,SAASC,GAAT,GAAe;AAAA,oBAEWL,QAAQ,CAAC,EAAD,CAFnB;AAAA;AAAA,QAENM,IAFM;AAAA,QAEAC,OAFA;;AAIbN,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeO,QAAf,GAAyB;AACvB,YAAMC,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAJ,CAAQ,OAAR,CAAvB;AAEAH,MAAAA,OAAO,CAACE,QAAQ,CAACE,IAAV,CAAP;AACD;;AAEDH,IAAAA,QAAQ;AACT,GARQ,EAQN,EARM,CAAT;;AAUA,iBAAeI,YAAf,CAA4BD,IAA5B,EAAkC;AAChC,UAAMF,QAAQ,GAAG,MAAMP,GAAG,CAACW,IAAJ,CAAS,OAAT,EAAkBF,IAAlB,CAAvB;AAGAJ,IAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAUG,QAAQ,CAACE,IAAnB,CAAD,CAAP,CAJgC,CAIG;AACnC;AACA;AACA;AACD;;AAED,SACE;AAAK,IAAA,EAAE,EAAC,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAEC,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,IAAI,CAACQ,GAAL,CAASC,GAAG,IACX,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAEA,GAAG,CAACC,EAAlB;AAAsB,IAAA,GAAG,EAAED,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADW,CACwB;AADpC,GADH,MADF,CALF,CADF;AAgBD;;AAED,eAAeV,GAAf;AAGA","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport api from './services/api';\n\nimport './global.css';\nimport './App.css';\nimport './Sidebar.css';\nimport './Main.css';\n\n// import DevForm from './components/DevForm';\nimport DevForm from './components/DevForm';\nimport DevItem from './components/DevItem';\n\nfunction App() { \n\n  const [devs, setDevs] = useState([]);\n\n  useEffect(() => {\n    async function loadDevs(){\n      const response = await api.get('/devs');\n\n      setDevs(response.data);\n    }\n\n    loadDevs();\n  }, []);\n\n  async function handleAddDev(data) {\n    const response = await api.post('/devs', data)\n\n\n    setDevs([...devs, response.data]); //ce pega o objeto inteiro do dev e inclui no final do array de dev\n    //como vai setar o valor completo, n pode jogar response.data senao ele sobre todo o valor do estado dev\n    //entao criamos um array, copia todos os devs (...devs) e adiciona o novo no final (response.data)\n    //é assim q faz adição de um array dentro do JS, se fosse remoção seria .filter, alteração seria .map\n  }\n\n  return (\n    <div id=\"app\">\n      <aside> \n        <strong>Cadastrar</strong>\n        <DevForm onSubmit={handleAddDev} />\n      </aside>\n      <main>\n        <ul>\n          {devs.map(dev => (\n            <DevItem key={dev.id} dev={dev} /> //identificador de cada dev é o key.id\n          ))} {/* pra utilizar uma expressão JS, sempre abre e fecha chaves*/}\n          \n        </ul>\n      </main>\n    </div>\n    );\n}\n\nexport default App;\n\n\n/*AREA DE COMENTÁRIOS\nComo era o App.js na hora q ele estava explicando useState  (Até 42:48)\n->\n\nimport React, { useState } from 'react';\n//useState função do React pra criar um Estado\n\n// import Header from './Header';\n\n/*\n3 conceitos principais do React \n->\nComponente  : O App é um componente, é uma função q retorna um conteudo HTML, pode retornar CSS e até JS pra interface.   Só pode 1 componente por arquivo.\nce chama ele assim <Header />, cria ele com a 1° letra Maiuscula\nEstado      : Uma informação mantida pelo componente q o componente vai manipular\nPropriedade : no HTML é atributos, por exemplo <Header title=\"Dashboard\" />. São informação q um componente pai passa para o componente filho\n\n\nfunction App() { //o App é uma função q retorna um conteudo HTML\n\n  const [counter, setCounter] = useState(0); //passa o valor inicial, no caso, 0. \n  //A função useState retorna um array com uma variavel e uma função pra atualizar esse valor\n\n  // function decrementCounter(){\n  //   setCounter(counter - 1);\n  // }\n\n  //Toda função q é propria de um elemento, cria dentro dele msm\n  function incrementCounter(){\n    setCounter(counter + 1); //n se pode mudar o valor de um estado pique counter++ ou counter = 4;\n    //pro React, vc nunca vai alterar um dado, vai sempre criar um novo dado a partir do valor anterior q ce tinha dele. É a imutabilidade\n  }\n\n  return (\n    <>\n      <h1>Contador : {counter}</h1>\n      <button onClick={incrementCounter}>Incrementar</button>\n      <button onClick={decrementCounter}>Decrementar</button>  Eu criei essa função, é legal poder desenvolver enquanto ele explica outra coisa\n\n    { <Header title=\"Meu painel\"/>  !!!!Aqui estava comentado, ele utilizou só pra mostrar como chamar outro componente!!!!!\n      <Header title=\"Titulo 1\"/>\n      <Header title=\"Titulo 2\"/> }  \n    </> //precisa entrar num container se tiver + de 1 componente, senão da problema. O container pode ser uma <div> só q isso pode quebrar a estilização do site\n    //então, podemos utilizar uma coisa legal do React q é o fragment, é só uma assinatura <> </>, ai n afeta\n  );\n}\n\nexport default App;\n\n->\n\n\nEsse aqui era o Header.js\n// import React from 'react';\n\n// function Header(props){\n//     return <h1>{props.title}</h1> //dentro do HTML, toda hora q quiser introduzir um conteudo JS, utiliza chaves em volta\n// }\n\n// export default Header;\n\n\n<aside> { TAG no HTML pra fazer side bar  }\n*/\n"]},"metadata":{},"sourceType":"module"}